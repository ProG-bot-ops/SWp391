// AI Chatbot Widget for G-Care Clinic
class ChatbotWidget {
    constructor() {
        this.isOpen = false;
        this.conversationHistory = [];
        this.appointmentData = {};
        this.isProcessing = false;
        
        this.init();
    }

    init() {
        this.createWidget();
        this.setupEventListeners();
        this.displayWelcomeMessage();
        this.showNotificationBadge();
    }

    createWidget() {
        // Create widget HTML
        const widgetHTML = `
            <div class="chatbot-widget">
                <button class="chatbot-toggle" id="chatbotToggle">
                    <i class="fas fa-comments"></i>
                    <div class="notification-badge" id="notificationBadge">1</div>
                </button>
                
                <div class="chatbot-container" id="chatbotContainer">
                    <div class="chatbot-header">
                        <h5>
                            <i class="fas fa-robot"></i>
                            AI Assistant
                            <span class="status">Online</span>
                        </h5>
                        <button class="close-btn" id="chatbotClose">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="chatbot-messages" id="chatbotMessages">
                        <!-- Messages will be added here -->
                    </div>
                    
                    <div class="chatbot-typing" id="chatbotTyping">
                        <span>AI ƒëang nh·∫≠p...</span>
                        <div class="chatbot-typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                    
                    <div class="chatbot-input">
                        <div class="chatbot-input-group">
                            <input type="text" id="chatbotInput" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...">
                            <button id="chatbotSend">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Append to body
        document.body.insertAdjacentHTML('beforeend', widgetHTML);
    }

    setupEventListeners() {
        // Toggle chatbot
        document.getElementById('chatbotToggle').addEventListener('click', () => {
            this.toggleChatbot();
        });
        
        // Close chatbot
        document.getElementById('chatbotClose').addEventListener('click', () => {
            this.closeChatbot();
        });
        
        // Send message
        document.getElementById('chatbotSend').addEventListener('click', () => {
            this.sendMessage();
        });
        
        // Enter key
        document.getElementById('chatbotInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // Auto-scroll to bottom
        const messagesContainer = document.getElementById('chatbotMessages');
        const observer = new MutationObserver(() => {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });
        observer.observe(messagesContainer, { childList: true });
    }

    toggleChatbot() {
        const container = document.getElementById('chatbotContainer');
        const badge = document.getElementById('notificationBadge');
        
        if (this.isOpen) {
            this.closeChatbot();
        } else {
            this.openChatbot();
            // Hide notification badge when opened
            badge.style.display = 'none';
        }
    }

    openChatbot() {
        const container = document.getElementById('chatbotContainer');
        container.classList.add('active');
        this.isOpen = true;
        
        // Focus on input
        setTimeout(() => {
            document.getElementById('chatbotInput').focus();
        }, 300);
    }

    closeChatbot() {
        const container = document.getElementById('chatbotContainer');
        container.classList.remove('active');
        this.isOpen = false;
    }

    showNotificationBadge() {
        // Show notification badge after 3 seconds
        setTimeout(() => {
            const badge = document.getElementById('notificationBadge');
            badge.style.display = 'flex';
        }, 3000);
    }

    displayWelcomeMessage() {
        const welcomeMessage = {
            type: 'bot',
            content: `Xin ch√†o! T√¥i l√† AI Assistant c·ªßa G-Care Clinic. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

üîπ ƒê·∫∑t l·ªãch kh√°m b·ªánh
üîπ T√¨m hi·ªÉu v·ªÅ d·ªãch v·ª•
üîπ Th√¥ng tin b√°c sƒ©
üîπ H∆∞·ªõng d·∫´n quy tr√¨nh kh√°m

B·∫°n c·∫ßn h·ªó tr·ª£ g√¨? üòä`,
            quickReplies: [
                'ƒê·∫∑t l·ªãch kh√°m',
                'Th√¥ng tin d·ªãch v·ª•',
                'Danh s√°ch b√°c sƒ©',
                'Li√™n h·ªá'
            ],
            timestamp: new Date()
        };
        
        this.addMessage(welcomeMessage);
    }

    async sendMessage() {
        const input = document.getElementById('chatbotInput');
        const message = input.value.trim();
        
        if (!message || this.isProcessing) return;
        
        // Add user message
        this.addMessage({
            type: 'user',
            content: message,
            timestamp: new Date()
        });
        
        input.value = '';
        this.isProcessing = true;
        
        // Show typing indicator
        this.showTypingIndicator();
        
        try {
            // Process message with AI
            const response = await this.processMessage(message);
            
            // Hide typing indicator
            this.hideTypingIndicator();
            
            // Add bot response
            this.addMessage(response);
            
        } catch (error) {
            console.error('Error processing message:', error);
            this.hideTypingIndicator();
            
            this.addMessage({
                type: 'bot',
                content: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
                timestamp: new Date()
            });
        }
        
        this.isProcessing = false;
    }

    async processMessage(message) {
        const lowerMessage = message.toLowerCase();
        
        // Intent recognition
        const intent = this.recognizeIntent(lowerMessage);
        
        // Process based on intent
        switch (intent) {
            case 'book_appointment':
                return await this.handleBookAppointment(message);
            case 'service_info':
                return this.handleServiceInfo();
            case 'doctor_info':
                return this.handleDoctorInfo();
            case 'contact_info':
                return this.handleContactInfo();
            case 'greeting':
                return this.handleGreeting();
            case 'help':
                return this.handleHelp();
            default:
                return this.handleUnknownIntent(message);
        }
    }

    recognizeIntent(message) {
        const intents = {
            book_appointment: [
                'ƒë·∫∑t l·ªãch', 'ƒë·∫∑t h·∫πn', 'kh√°m b·ªánh', 'l·ªãch kh√°m', 'ƒë·∫∑t l·ªãch kh√°m',
                'book appointment', 'schedule', 'appointment'
            ],
            service_info: [
                'd·ªãch v·ª•', 'th√¥ng tin d·ªãch v·ª•', 'services', 'treatment'
            ],
            doctor_info: [
                'b√°c sƒ©', 'doctor', 'danh s√°ch b√°c sƒ©', 'doctor list'
            ],
            contact_info: [
                'li√™n h·ªá', 'contact', 'ƒë·ªãa ch·ªâ', 's·ªë ƒëi·ªán tho·∫°i', 'address'
            ],
            greeting: [
                'xin ch√†o', 'hello', 'hi', 'ch√†o', 'good morning', 'good afternoon'
            ],
            help: [
                'gi√∫p ƒë·ª°', 'help', 'h·ªó tr·ª£', 'support'
            ]
        };

        for (const [intent, keywords] of Object.entries(intents)) {
            if (keywords.some(keyword => message.includes(keyword))) {
                return intent;
            }
        }
        
        return 'unknown';
    }

    async handleBookAppointment(message) {
        if (!this.appointmentData.step) {
            this.appointmentData = { step: 'name' };
            return {
                type: 'bot',
                content: 'T√¥i s·∫Ω gi√∫p b·∫°n ƒë·∫∑t l·ªãch kh√°m t·∫°i G-Care Clinic. ƒê·ªÉ b·∫Øt ƒë·∫ßu, vui l√≤ng cho t√¥i bi·∫øt h·ªç t√™n c·ªßa b·∫°n:',
                timestamp: new Date()
            };
        }

        // Extract information from message
        const extractedInfo = this.extractAppointmentInfo(message);
        
        if (this.appointmentData.step === 'name') {
            this.appointmentData.name = extractedInfo.name || message;
            this.appointmentData.step = 'phone';
            return {
                type: 'bot',
                content: `C·∫£m ∆°n ${this.appointmentData.name}! Vui l√≤ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n:`,
                timestamp: new Date()
            };
        }
        
        if (this.appointmentData.step === 'phone') {
            this.appointmentData.phone = extractedInfo.phone || message;
            this.appointmentData.step = 'department';
            return {
                type: 'bot',
                content: 'B·∫°n mu·ªën kh√°m khoa n√†o? D∆∞·ªõi ƒë√¢y l√† c√°c khoa hi·ªán c√≥ t·∫°i G-Care Clinic:',
                quickReplies: [
                    'Khoa RƒÉng H√†m M·∫∑t',
                    'Khoa Nhi',
                    'Khoa Da li·ªÖu',
                    'Khoa M·∫Øt',
                    'Khoa Tai m≈©i h·ªçng',
                    'Khoa N·ªôi t·ªïng qu√°t'
                ],
                timestamp: new Date()
            };
        }
        
        if (this.appointmentData.step === 'department') {
            this.appointmentData.department = message;
            this.appointmentData.step = 'date';
            return {
                type: 'bot',
                content: 'B·∫°n mu·ªën ƒë·∫∑t l·ªãch v√†o ng√†y n√†o? (Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY):',
                timestamp: new Date()
            };
        }
        
        if (this.appointmentData.step === 'date') {
            const date = this.parseDate(message);
            if (!date) {
                return {
                    type: 'bot',
                    content: 'Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng DD/MM/YYYY (v√≠ d·ª•: 25/12/2024):',
                    timestamp: new Date()
                };
            }
            this.appointmentData.date = date;
            this.appointmentData.step = 'time';
            return {
                type: 'bot',
                content: 'B·∫°n mu·ªën kh√°m v√†o gi·ªù n√†o?',
                quickReplies: [
                    '8:00 - 9:00',
                    '9:00 - 10:00',
                    '10:00 - 11:00',
                    '14:00 - 15:00',
                    '15:00 - 16:00',
                    '16:00 - 17:00'
                ],
                timestamp: new Date()
            };
        }
        
        if (this.appointmentData.step === 'time') {
            this.appointmentData.time = message;
            this.appointmentData.step = 'confirm';
            
            return {
                type: 'bot',
                content: `Vui l√≤ng x√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch:

üë§ **H·ªç t√™n:** ${this.appointmentData.name}
üìû **S·ªë ƒëi·ªán tho·∫°i:** ${this.appointmentData.phone}
üè• **Khoa:** ${this.appointmentData.department}
üìÖ **Ng√†y:** ${this.appointmentData.date}
‚è∞ **Gi·ªù:** ${this.appointmentData.time}

Th√¥ng tin tr√™n c√≥ ch√≠nh x√°c kh√¥ng?`,
                quickReplies: ['X√°c nh·∫≠n', 'S·ª≠a l·∫°i'],
                timestamp: new Date()
            };
        }
        
        if (this.appointmentData.step === 'confirm') {
            if (message.toLowerCase().includes('x√°c nh·∫≠n') || message.toLowerCase().includes('ƒë√∫ng')) {
                return await this.submitAppointment();
            } else {
                this.appointmentData = { step: 'name' };
                return {
                    type: 'bot',
                    content: 'Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i. Cho t√¥i bi·∫øt h·ªç t√™n c·ªßa b·∫°n:',
                    timestamp: new Date()
                };
            }
        }
    }

    async submitAppointment() {
        try {
            // Prepare appointment data
            const appointmentData = {
                patientName: this.appointmentData.name,
                phoneNumber: this.appointmentData.phone,
                department: this.appointmentData.department,
                appointmentDate: this.appointmentData.date,
                appointmentTime: this.appointmentData.time,
                status: 'Pending'
            };
            
            // Call API to create appointment (mock for now)
            const response = await this.createAppointmentAPI(appointmentData);
            
            if (response.success) {
                this.appointmentData = {};
                return {
                    type: 'bot',
                    content: `‚úÖ **ƒê·∫∑t l·ªãch th√†nh c√¥ng!**

M√£ l·ªãch h·∫πn: **${response.appointmentCode}**
Ng√†y kh√°m: ${appointmentData.appointmentDate}
Gi·ªù kh√°m: ${appointmentData.appointmentTime}

Vui l√≤ng ƒë·∫øn G-Care Clinic tr∆∞·ªõc 15 ph√∫t so v·ªõi gi·ªù h·∫πn. Mang theo CMND/CCCD v√† b·∫£o hi·ªÉm y t·∫ø (n·∫øu c√≥).

C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn G-Care Clinic! üè•`,
                    timestamp: new Date()
                };
            } else {
                throw new Error(response.message);
            }
            
        } catch (error) {
            return {
                type: 'bot',
                content: `‚ùå **ƒê·∫∑t l·ªãch th·∫•t b·∫°i!**

L·ªói: ${error.message}

Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá hotline 0862502458 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`,
                timestamp: new Date()
            };
        }
    }

    handleServiceInfo() {
        return {
            type: 'bot',
            content: `üè• **D·ªãch v·ª• t·∫°i G-Care Clinic:**

ü¶∑ **Khoa RƒÉng H√†m M·∫∑t:**
- Kh√°m v√† ƒëi·ªÅu tr·ªã rƒÉng mi·ªáng
- C·∫•y gh√©p Implant
- Ch·ªânh nha th·∫©m m·ªπ
- T·∫©y tr·∫Øng rƒÉng

üë∂ **Khoa Nhi:**
- Kh√°m s·ª©c kh·ªèe tr·∫ª em
- Ti√™m ch·ªßng
- T∆∞ v·∫•n dinh d∆∞·ª°ng

üëÅÔ∏è **Khoa M·∫Øt:**
- Kh√°m m·∫Øt t·ªïng qu√°t
- ƒêo th·ªã l·ª±c
- ƒêi·ªÅu tr·ªã c√°c b·ªánh v·ªÅ m·∫Øt

üëÇ **Khoa Tai M≈©i H·ªçng:**
- Kh√°m v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh tai m≈©i h·ªçng
- N·ªôi soi tai m≈©i h·ªçng

ü©∫ **Khoa N·ªôi t·ªïng qu√°t:**
- Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t
- T∆∞ v·∫•n s·ª©c kh·ªèe

B·∫°n quan t√¢m ƒë·∫øn d·ªãch v·ª• n√†o?`,
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin b√°c sƒ©', 'Li√™n h·ªá'],
            timestamp: new Date()
        };
    }

    handleDoctorInfo() {
        return {
            type: 'bot',
            content: `üë®‚Äç‚öïÔ∏è **ƒê·ªôi ng≈© b√°c sƒ© G-Care Clinic:**

**Dr. V≈© VƒÉn Long**
- Chuy√™n khoa: RƒÉng H√†m M·∫∑t
- Kinh nghi·ªám: 12+ nƒÉm
- Chuy√™n m√¥n: ƒêi·ªÅu tr·ªã rƒÉng mi·ªáng cho tr·∫ª em v√† ng∆∞·ªùi l·ªõn

**Dr. Nguy·ªÖn Minh ƒê·ª©c**
- Chuy√™n khoa: RƒÉng H√†m M·∫∑t
- T·ªët nghi·ªáp lo·∫°i Gi·ªèi ƒê·∫°i h·ªçc Y H√† N·ªôi
- Ch·ª©ng ch·ªâ c·∫•y gh√©p Implant qu·ªëc t·∫ø

**Dr. D∆∞∆°ng Minh To·∫£n**
- Chuy√™n khoa: RƒÉng H√†m M·∫∑t
- ƒê√£ ph·ª•c h√¨nh th√†nh c√¥ng 500+ ca rƒÉng th·∫©m m·ªπ

**Dr. Nguy·ªÖn Kh√°c Tr√°ng**
- Chuy√™n khoa: RƒÉng H√†m M·∫∑t
- 15+ nƒÉm kinh nghi·ªám t·∫°i c√°c b·ªánh vi·ªán l·ªõn

**Dr. Nguy·ªÖn Minh Anh**
- Chuy√™n khoa: RƒÉng H√†m M·∫∑t
- Gi·∫£ng vi√™n ƒê·∫°i h·ªçc Y H√† N·ªôi

B·∫°n mu·ªën ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ© n√†o?`,
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin d·ªãch v·ª•', 'Li√™n h·ªá'],
            timestamp: new Date()
        };
    }

    handleContactInfo() {
        return {
            type: 'bot',
            content: `üìû **Th√¥ng tin li√™n h·ªá G-Care Clinic:**

üìç **ƒê·ªãa ch·ªâ:** FPT University H√≤a L·∫°c
üìß **Email:** nguyenducgiangqp@gmail.com
üì± **Hotline:** 0862502458

‚è∞ **Gi·ªù l√†m vi·ªác:**
- Th·ª© 2 - Th·ª© 6: 8:00 - 18:00
- Th·ª© 7: 8:00 - 12:00
- Ch·ªß nh·∫≠t: Ngh·ªâ

üöó **Ph∆∞∆°ng ti·ªán:**
- Xe bu√Ωt: Tuy·∫øn ƒë·∫øn FPT University
- Taxi: C√≥ b√£i ƒë·ªó xe
- Xe m√°y: C√≥ b√£i gi·ªØ xe

üÖøÔ∏è **B√£i ƒë·ªó xe:** Mi·ªÖn ph√≠ cho b·ªánh nh√¢n

B·∫°n c·∫ßn h·ªó tr·ª£ th√™m g√¨ kh√¥ng?`,
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin d·ªãch v·ª•', 'Danh s√°ch b√°c sƒ©'],
            timestamp: new Date()
        };
    }

    handleGreeting() {
        const greetings = [
            'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n t·∫°i G-Care Clinic? üòä',
            'Ch√†o b·∫°n! B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ d·ªãch v·ª• kh√°m ch·ªØa b·ªánh kh√¥ng?',
            'Xin ch√†o! T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n ƒë·∫∑t l·ªãch kh√°m t·∫°i G-Care Clinic!'
        ];
        
        return {
            type: 'bot',
            content: greetings[Math.floor(Math.random() * greetings.length)],
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin d·ªãch v·ª•', 'Danh s√°ch b√°c sƒ©'],
            timestamp: new Date()
        };
    }

    handleHelp() {
        return {
            type: 'bot',
            content: `üîß **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**

üìÖ **ƒê·∫∑t l·ªãch kh√°m:** H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·∫∑t l·ªãch
üè• **Th√¥ng tin d·ªãch v·ª•:** Gi·ªõi thi·ªáu c√°c khoa v√† d·ªãch v·ª•
üë®‚Äç‚öïÔ∏è **Danh s√°ch b√°c sƒ©:** Th√¥ng tin ƒë·ªôi ng≈© b√°c sƒ©
üìû **Li√™n h·ªá:** ƒê·ªãa ch·ªâ, s·ªë ƒëi·ªán tho·∫°i, gi·ªù l√†m vi·ªác

B·∫°n mu·ªën l√†m g√¨? Ch·ªçn t·ª´ menu ho·∫∑c nh·∫≠p tin nh·∫Øn!`,
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin d·ªãch v·ª•', 'Danh s√°ch b√°c sƒ©'],
            timestamp: new Date()
        };
    }

    handleUnknownIntent(message) {
        return {
            type: 'bot',
            content: `Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ y√™u c·∫ßu c·ªßa b·∫°n. 

T·∫°i G-Care Clinic, b·∫°n c√≥ th·ªÉ:
- ƒê·∫∑t l·ªãch kh√°m b·ªánh
- T√¨m hi·ªÉu th√¥ng tin d·ªãch v·ª•
- Xem danh s√°ch b√°c sƒ©
- Li√™n h·ªá v·ªõi ch√∫ng t√¥i

Ho·∫∑c g√µ "gi√∫p ƒë·ª°" ƒë·ªÉ xem t·∫•t c·∫£ t√≠nh nƒÉng!`,
            quickReplies: ['ƒê·∫∑t l·ªãch kh√°m', 'Th√¥ng tin d·ªãch v·ª•', 'Gi√∫p ƒë·ª°'],
            timestamp: new Date()
        };
    }

    // Utility functions
    extractAppointmentInfo(message) {
        const info = {};
        
        // Extract name (simple heuristic)
        if (message.length > 2 && message.length < 50) {
            info.name = message.trim();
        }
        
        // Extract phone number
        const phoneRegex = /(\d{10,11})/;
        const phoneMatch = message.match(phoneRegex);
        if (phoneMatch) {
            info.phone = phoneMatch[1];
        }
        
        return info;
    }

    parseDate(dateString) {
        const dateRegex = /(\d{1,2})\/(\d{1,2})\/(\d{4})/;
        const match = dateString.match(dateRegex);
        
        if (match) {
            const day = parseInt(match[1]);
            const month = parseInt(match[2]) - 1;
            const year = parseInt(match[3]);
            
            const date = new Date(year, month, day);
            const today = new Date();
            
            // Check if date is valid and in the future
            if (date > today && date.getDate() === day && date.getMonth() === month && date.getFullYear() === year) {
                return `${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`;
            }
        }
        
        return null;
    }

    // API functions (mock for now)
    async createAppointmentAPI(data) {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Mock response
        return {
            success: true,
            appointmentCode: 'GC-' + Math.random().toString(36).substr(2, 4).toUpperCase(),
            message: 'Appointment created successfully'
        };
    }

    // UI functions
    addMessage(message) {
        const messagesContainer = document.getElementById('chatbotMessages');
        const messageElement = this.createMessageElement(message);
        messagesContainer.appendChild(messageElement);
        
        // Save to conversation history
        this.conversationHistory.push(message);
    }

    createMessageElement(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chatbot-message ${message.type}`;
        
        const content = document.createElement('div');
        content.className = 'chatbot-message-content';
        content.innerHTML = message.content;
        
        const time = document.createElement('div');
        time.className = 'chatbot-message-time';
        time.textContent = this.formatTime(message.timestamp);
        
        messageDiv.appendChild(content);
        messageDiv.appendChild(time);
        
        // Add quick replies if available
        if (message.quickReplies && message.quickReplies.length > 0) {
            const quickReplies = document.createElement('div');
            quickReplies.className = 'chatbot-quick-replies';
            
            message.quickReplies.forEach(reply => {
                const button = document.createElement('button');
                button.className = 'chatbot-quick-reply';
                button.textContent = reply;
                button.onclick = () => this.handleQuickReply(reply);
                quickReplies.appendChild(button);
            });
            
            content.appendChild(quickReplies);
        }
        
        return messageDiv;
    }

    handleQuickReply(reply) {
        document.getElementById('chatbotInput').value = reply;
        this.sendMessage();
    }

    formatTime(timestamp) {
        return timestamp.toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    showTypingIndicator() {
        document.getElementById('chatbotTyping').classList.add('active');
    }

    hideTypingIndicator() {
        document.getElementById('chatbotTyping').classList.remove('active');
    }
}

// Initialize chatbot when page loads
document.addEventListener('DOMContentLoaded', () => {
    new ChatbotWidget();
}); 